import { StateGraph, Annotation } from "@langchain/langgraph";
import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { z } from "zod";
import dotenv from "dotenv";
import UserQuizForm from "../models/UserQuizForm.js";
import UserSkill from "../models/UserSkill.js";

import AgenticDashboardData from "../models/AgenticDashboardData.js";
import mongoose from "mongoose";

dotenv.config();

async function getGridFSVideoFilenames(): Promise<string[]> {
    try {
        const db = mongoose.connection.db;
        if (!db) {
            throw new Error("MongoDB connection not established.");
        }
        const filesCollection = db.collection("tutorialDB.files");
        const files = await filesCollection.find({}, { projection: { filename: 1, _id: 0 } }).toArray();
        return files.map(file => file.filename);
    } catch (error) {
        console.error("Error fetching GridFS video filenames:", error);
        return [];
    }
}

const llm = new ChatGoogleGenerativeAI({
    model: "gemini-2.5-flash-lite",
    temperature: 0
});

const agenticDashboardDataSchema = z.object({
    uid: z.string().describe("The unique ID of the user"),
    title: z.string().describe("The title of the dashboard"),
    description: z.string().describe("The description of the dashboard"),
    videosFileName: z.array(z.string()).describe("An array of video file names in the db collection given")
});

const StateAnnotation = Annotation.Root({
    userQuizData: Annotation<string>, //import it
    userSkill: Annotation<string>, //import it
    uid: Annotation<string>, //second
    title: Annotation<string>,
    description: Annotation<string>,
    videoArray: Annotation<Array<string>>,
    success: Annotation<Boolean>
});

const dashboardAgent = llm.withStructuredOutput(agenticDashboardDataSchema);

async function createAgentDashboard(state: typeof StateAnnotation.State) {
    const result = await dashboardAgent.invoke([{
        role: "system",
        content: `
            You are going to create a course dashboard for the user based on their skill level and quiz infomation
            CRITICAL VALIDATION RULES:
            1. title of the course
            2. indepth description of the course
            3. array of relevant videos from the db. Suggest all the videos that pertain to the language. Ignore skill level of user
            Available video files: ${state.videoArray.join(', ')}
        `,
    }, {
        role: "user",
        content: state.userQuizData + "\n" + state.userSkill
    }]);

    //Add to mongodb
    const newDashboard = new AgenticDashboardData({
        ...result,
        uid: state.uid,
    })

    await newDashboard.save();

    return { success: true };
}

const agentWorkflow = new StateGraph(StateAnnotation)
    .addNode("createAgentDashboard", createAgentDashboard)
    .addEdge("__start__", "createAgentDashboard")
    .addEdge("createAgentDashboard", "__end__")
    .compile();

export default async function GenerateDashboard(userUID: string) {
    const userForm = await UserQuizForm.findOne({ uid: userUID });
    if (!userForm) {
        throw new Error("User form not found");
    }

    const userSkill = await UserSkill.findOne({ uid: userUID });
    if (!userSkill) {
        throw new Error("User skill not found");
    }

    // Placeholder for title and description - ideally these would be generated by an agent or provided by the user
    const title = "Generated Dashboard";
    const description = "A dashboard generated based on user quiz data and skill level.";
    const videoFileNames = await getGridFSVideoFilenames();

    await agentWorkflow.invoke({
        userQuizData: JSON.stringify(userForm.toObject()),
        userSkill: `Difficulty: ${userSkill.difficulty}, Target Skill: ${userSkill.targetSkill}`,
        uid: userUID,
        title: title,
        description: description,
        videoArray: videoFileNames,
    });
}